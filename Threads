/* Architecture 4 Programmation répartie */

// Objectif du module

    Le fonctionnement d'un ordinateur est basé sur l'execution des processus ou des processus multi-tâches.
    La concurence entre les processus et les tâches au sein d'un système et d'un réseau est à gérer.
    Les raisons sont multiples :

        - la présence des ressources critiques
        - des dépendances entre les processus
        - des séquencements et des ordonnancements à respecter


    Plus généralement, les mêmes problèmes peuvent être présents quand des processus communiquent via le réseau


    PLAN:

    - Rafraichir des connaissance sur les processus et sur les threads
    - Etudies des communication / coopération entre des processus locaux mais aussi distants
        - Communication entre processsus
        - Communication entre tâches (threads)
            --> Réaliser certains services/communications
        - Problèmes issus du fonctionnemen parallèle
            --> Utilisation des ressources critiques et/ou limitées
            --> Synchroniser de processus
    - Etudier les implémentations en JAVA


// Contenu

    - Processus et tâche concurreniels
    - Utilisation concurrentielle des ressources
        - Problème de la concurence
        - Ressources (et sections) critiques
        - Exlusion mutuelle
    - Outils
        - Verrouillage, verrous
        - Sémaphores
        - Barrières
    - Synchronistion des processus
    - Communication entre processus distants
        - Rappels des réseaux
        - Boîtes aux lettres
        - Sockets
        - Modèle client/serveur


// Processus

    Question : Quelles sont les parties d'un programme exécutable ?

    Processus : un programm en cours d'exécution (un programme peut être lancé plusieurs fois)

        - Chaque processus possède :
            - un segment (zone d'adressage contiguë) de texte (du programme) qui est invariant
            - un segment de données qui s'évolue avec l'exécution
        - Contexte du processus : il doit donner les informations usr l'execution des procédures (des fonctions par exemple)
            --> Réalisé sous forme d'une pile d'exécution (pour sauvegarder les contextes, les valeurs passées ...)
        - Contexte du processus : il doit donner les informations sur l'etat du processus
            --> contenu des registres, du compteur ordinal, drapeaux ...
        - Les processus doivent partager (et attendre) les ressources communes (CPU, mémoire, périphériques, fichiers etc ...)


// Communciation entre processus fils et père

    - L'appel systeme fork() crée un processus fils par une copie de son père (zone du texte et de données)
    - Le fils "hérite" des fichiers de redirections, mais utilise des variables, des tampons différents
    - Dans le code :
        - Le fils recoit le code de retour = 0
        - Le père recoit le PID de son fils
        - pas de communication entre les deux pas les varialves (chacun a une copie non partagéee des variables)

    Remarque : dans certains cas, les processus peuvent partager le code mais pas les données


// Communication entre processus (rappel)

    Différentes communication sont possibles entre les porcessus (concurentiels dans un même système)
        - par cade de retour ( exit(n) )
        - par paramètres passée (e.g. argument d'un programme C)
        - par fichiers
        - par tubes nommés (pourquoi pas anonmymes ?)
        - par files de messages
        - pr signaux

    Si les processus qui veulent communiquer tournent sur des machines différentes, ils doivent
        - être connectés (via le réseau)
        - utiliser les services du réseau
        - résoudre des éventuels problemes de communications syncrhonisation et de la concurrence


// Etat d'un processus

    A un moment donné de son existance, un processus est dans un des éts possibles suivnts:

                ----->  Prêt
                |        |
                |        |
                |      election
                |        |
                |        |
             deblocage  Elu
                |        |
                |        |
                |      Blocage
                |        |
                |        |
                |-----  Bloqué

    figure : Etats trasition (simplifiés d'un processus)

    Question : qui décide l'éxecution d'un processus ?


// Processus et JAVA

    Ici, on utilise JAVA qui s’évolue sans cesse
        - Des éléments de la programmation distribué et des conteneurs génériques sont apparus
        - Nous restons à un niveau simple de la programmation JAVA

    Questions :
        - Comment créer un "exécutable" en JAVA (exemple : prog.class) ?
        - Comment exécuter un "exécutable" en JAVA ?
        - Quel est le processus qui s'execute ?
        - Comment faire simplement des programmes distribués ?


// Provessus légers - threads

    Thread : sous-processus qui s’exécutent au sein d’un processus

    - Chaque provessus a une tâche initiale (main)
    - Chaque thread possède :
        - Son propre mot d'etat (PSW), son propre context du processeur
        - Une pile (variables locales)
    - Les threahds partagent :
        - Le code
        - Les données globales et/ou statiques
    - Intérêt : si plusieirs processeurs existent dans le système, des parties penvent être exécutées "independamment"
    - Comme certaines données sont partagées, il faut éviter es conflits et les incohérences

//




































